--- unitlog.pas
+++ unitlog.pas
@@ -153,18 +209,21 @@ begin
   fEdit := theEditor;
   fAnsiHandler := TAnsiEscapesHandler.Create(fEdit);
   fLogEvent := aLogEvent;
+  fLogCache := TLogCache.Create;
 end;
 
 destructor TLogHandler.Destroy;
 begin
   fAnsiHandler.Free;
+  fLogCache.Free;
   inherited Destroy;
 end;
 
 procedure TLogHandler.ShowLog;
 var
   cmd: string;
-  lst: TStringList;
+  lst, refs: TStringList;
+  M: TMemoryStream;
 begin
   fEdit.Clear;
   fAnsiHandler.Reset;
@@ -176,15 +235,30 @@ begin
   //        No: Update it
   // show cached log
 
-  if FileExists(fGit.TopLevelDir + 'lazgitgui.cache') then begin
-    // is up to date?
-    // the info file is a list of local refs with their latest oids
-    lst := TStringList.Create;
-    try
+  lst := TStringList.Create;
+  refs := TStringList.Create;
+  try
+
+    if FileExists(fGit.TopLevelDir + 'lazgitgui.info') then
       lst.LoadFromFile(fGit.TopLevelDir + 'lazgitgui.info');
-    finally
-      lst.Free;
-    end;
+
+    //fGit.RefList(refs, 'refs/heads refs/tags', ['%(refname:short)','%(refname:rstrip=-2)','%(objectname)']);
+
+
+
+
+    //if FileExists(fGit.TopLevelDir + 'lazgitgui.cache') then begin
+    //  // is up to date?
+    //  // the info file is a list of local refs with their latest oids
+    //end;
+
+    // store the new log limits known to us
+    M.Seek(0, soEOF);
+    LogDb.Seek(0, soEOF);
+  finally
+    lst.Free;
+    ClearRefList(refs);
+    refs.Free;
   end;
 
   {$IFDEF CaptureOutput}
